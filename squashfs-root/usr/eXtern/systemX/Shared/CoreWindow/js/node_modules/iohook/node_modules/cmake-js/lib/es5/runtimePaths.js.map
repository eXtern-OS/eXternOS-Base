{"version":3,"names":[],"mappings":"","sources":["runtimePaths.js"],"sourcesContent":["\"use strict\";\r\nlet _ = require(\"lodash\");\r\nlet assert = require(\"assert\");\r\nlet semver = require(\"semver\");\r\n\r\nlet NODE_MIRROR = process.env.NVM_NODEJS_ORG_MIRROR || \"https://nodejs.org/dist\";\r\nlet IOJS_MIRROR = process.env.NVM_IOJS_ORG_MIRROR || \"https://iojs.org/dist\";\r\nlet ELECTRON_MIRROR = process.env.ELECTRON_MIRROR || \"https://atom.io/download/atom-shell\";\r\n\r\nlet runtimePaths = {\r\n    node: function (targetOptions) {\r\n        if (semver.lt(targetOptions.runtimeVersion, \"4.0.0\")) {\r\n            return {\r\n                externalPath: NODE_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\r\n                winLibs: [{\r\n                    dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                    name: targetOptions.runtime + \".lib\"\r\n                }],\r\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n                headerOnly: false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                externalPath: NODE_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\r\n                winLibs: [{\r\n                    dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\r\n                    name: targetOptions.runtime + \".lib\"\r\n                }],\r\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \"-headers.tar.gz\",\r\n                headerOnly: true\r\n            };\r\n        }\r\n    },\r\n    iojs: function (targetOptions) {\r\n        return {\r\n            externalPath: IOJS_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\r\n            winLibs: [{\r\n                dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\r\n                name: targetOptions.runtime + \".lib\"\r\n            }],\r\n            tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n            headerOnly: false\r\n        };\r\n    },\r\n    nw: function (targetOptions) {\r\n        if (semver.gte(targetOptions.runtimeVersion, \"0.13.0\")) {\r\n            return {\r\n                externalPath: \"https://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\r\n                winLibs: [\r\n                    {\r\n                        dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                        name: targetOptions.runtime + \".lib\"\r\n                    },\r\n                    {\r\n                        dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                        name: \"node.lib\"\r\n                    }\r\n                ],\r\n                tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n                headerOnly: false\r\n            };\r\n        }\r\n        return {\r\n            externalPath: \"https://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\r\n            winLibs: [{\r\n                dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                name: targetOptions.runtime + \".lib\"\r\n            }],\r\n            tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n            headerOnly: false\r\n        };\r\n    },\r\n    electron: function (targetOptions) {\r\n        return {\r\n            externalPath: ELECTRON_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\r\n            winLibs: [{\r\n                dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                name: \"node.lib\"\r\n            }],\r\n            tarPath: \"node\" + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n            headerOnly: semver.gte(targetOptions.runtimeVersion, '4.0.0-alpha')\r\n        };\r\n    },\r\n    get: function (targetOptions) {\r\n        assert(_.isObject(targetOptions));\r\n\r\n        let runtime = targetOptions.runtime;\r\n        let func = runtimePaths[runtime];\r\n        let paths;\r\n        if (_.isFunction(func) && _.isPlainObject(paths = func(targetOptions))) {\r\n            return paths;\r\n        }\r\n        throw new Error(\"Unknown runtime: \" + runtime);\r\n    }\r\n};\r\n\r\nmodule.exports = runtimePaths;\r\n"],"file":"runtimePaths.js"}