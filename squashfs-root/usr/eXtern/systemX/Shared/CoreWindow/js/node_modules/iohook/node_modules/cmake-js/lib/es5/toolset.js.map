{"version":3,"names":[],"mappings":"","sources":["toolset.js"],"sourcesContent":["\"use strict\";\r\nlet Promise = require(\"bluebird\");\r\nlet async = Promise.coroutine;\r\nlet _ = require(\"lodash\");\r\nlet TargetOptions = require(\"./targetOptions\");\r\nlet environment = require(\"./environment\");\r\nlet assert = require(\"assert\");\r\nlet vsDetect = require(\"./vsDetect\");\r\nlet path = require(\"path\");\r\nlet CMLog = require(\"./cmLog\");\r\n\r\nfunction Toolset(options) {\r\n    this.options = options || {};\r\n    this.targetOptions = new TargetOptions(this.options);\r\n    this.generator = options.generator;\r\n    this.toolset = options.toolset;\r\n    this.target = options.target;\r\n    this.cCompilerPath = null;\r\n    this.cppCompilerPath = null;\r\n    this.compilerFlags = [];\r\n    this.linkerFlags = [];\r\n    this.makePath = null;\r\n    this.log = new CMLog(this.options);\r\n    this._initialized = false;\r\n}\r\n\r\nToolset.prototype.initialize = async(function*(install) {\r\n    if (!this._initialized) {\r\n        if (environment.isWin) {\r\n            yield this.initializeWin(install);\r\n        }\r\n        else {\r\n            this.initializePosix(install);\r\n        }\r\n        this._initialized = true;\r\n    }\r\n});\r\n\r\nToolset.prototype.initializePosix = function (install) {\r\n    // 1: Compiler\r\n    if (!environment.isGPPAvailable && !environment.isClangAvailable) {\r\n        if (environment.isOSX) {\r\n            throw new Error(\"C++ Compiler toolset is not available. Install Xcode Commandline Tools from Apple Dev Center, or install Clang with homebrew by invoking: 'brew install llvm --with-clang --with-asan'.\");\r\n        }\r\n        else {\r\n            throw new Error(\"C++ Compiler toolset is not available. Install proper compiler toolset with your package manager, eg. 'sudo apt-get install g++'.\");\r\n        }\r\n    }\r\n\r\n    if (this.options.preferClang && environment.isClangAvailable) {\r\n        if (install) {\r\n            this.log.info(\"TOOL\", \"Using clang++ compiler, because preferClang option is set, and clang++ is available.\");\r\n        }\r\n        this.cppCompilerPath = \"clang++\";\r\n        this.cCompilerPath = \"clang\";\r\n    }\r\n    else if (this.options.preferGnu && environment.isGPPAvailable) {\r\n        if (install) {\r\n            this.log.info(\"TOOL\", \"Using g++ compiler, because preferGnu option is set, and g++ is available.\");\r\n        }\r\n        this.cppCompilerPath = \"g++\";\r\n        this.cCompilerPath = \"gcc\";\r\n    }\r\n    // if it's already set because of options...\r\n    if (this.generator) {\r\n        if (install) {\r\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\r\n        }\r\n    }\r\n    // 2: Generator\r\n    else if (environment.isOSX) {\r\n        if (this.options.preferXcode) {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Xcode generator, because preferXcode option is set.\");\r\n            }\r\n            this.generator = \"Xcode\";\r\n        }\r\n        else if (this.options.preferMake && environment.isMakeAvailable) {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\r\n            }\r\n            this.generator = \"Unix Makefiles\";\r\n        }\r\n        else if (environment.isNinjaAvailable) {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\r\n            }\r\n            this.generator = \"Ninja\";\r\n        }\r\n        else {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\r\n            }\r\n            this.generator = \"Unix Makefiles\";\r\n        }\r\n    }\r\n    else {\r\n        if (this.options.preferMake && environment.isMakeAvailable) {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\r\n            }\r\n            this.generator = \"Unix Makefiles\";\r\n        }\r\n        else if (environment.isNinjaAvailable) {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\r\n            }\r\n            this.generator = \"Ninja\";\r\n        }\r\n        else {\r\n            if (install) {\r\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\r\n            }\r\n            this.generator = \"Unix Makefiles\";\r\n        }\r\n    }\r\n\r\n    // 3: Flags\r\n    if (environment.isOSX) {\r\n        if (install) {\r\n            this.log.verbose(\"TOOL\", \"Setting default OSX compiler flags.\");\r\n        }\r\n\r\n        this.compilerFlags.push(\"-D_DARWIN_USE_64_BIT_INODE=1\");\r\n        this.compilerFlags.push(\"-D_LARGEFILE_SOURCE\");\r\n        this.compilerFlags.push(\"-D_FILE_OFFSET_BITS=64\");\r\n        this.compilerFlags.push(\"-DBUILDING_NODE_EXTENSION\");\r\n        this.linkerFlags.push(\"-undefined dynamic_lookup\");\r\n    }\r\n\r\n    // 4: Build target\r\n    if (this.options.target) {\r\n      this.log.info(\"TOOL\", \"Building only the \" + this.options.target + \" target, as specified from the command line.\");\r\n    }\r\n\r\n};\r\n\r\nToolset.prototype.initializeWin = async(function*(install) {\r\n    // Visual Studio:\r\n    // if it's already set because of options...\r\n    if (this.generator) {\r\n        if (install) {\r\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\r\n        }\r\n        if (this.targetOptions.isX86) {\r\n            if (install) {\r\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\r\n            }\r\n            this.linkerFlags.push(\"/SAFESEH:NO\");\r\n        }\r\n        return;\r\n    }\r\n    let topVS = yield this._getTopSupportedVisualStudioGenerator();\r\n    //if (!this.options.noMSVC) {\r\n    if (topVS) {\r\n        if (install) {\r\n            this.log.info(\"TOOL\", `Using ${topVS} generator.`);\r\n        }\r\n        this.generator = topVS;\r\n        if (this.targetOptions.isX86) {\r\n            if (install) {\r\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\r\n            }\r\n            this.linkerFlags.push(\"/SAFESEH:NO\");\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"There is no Visual C++ compiler installed. Install Visual C++ Build Toolset or Visual Studio.\");\r\n    }\r\n});\r\n\r\nToolset.prototype._getTopSupportedVisualStudioGenerator = async(function*() {\r\n    let CMake = require(\"./cMake\");\r\n    assert(environment.isWin);\r\n    let list = yield CMake.getGenerators(this.options);\r\n    let maxVer = 0;\r\n    let result = null;\r\n    for (let gen of list) {\r\n        let found = /^visual studio (\\d+)/i.exec(gen);\r\n        if (found) {\r\n            let ver = parseInt(found[1]);\r\n            if (ver > maxVer) {\r\n                if (yield vsDetect.isInstalled(ver + \".0\")) {\r\n                    result = this.targetOptions.isX64 ? (gen + \" Win64\") : gen;\r\n                    maxVer = ver;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n});\r\n\r\nmodule.exports = Toolset;\r\n"],"file":"toolset.js"}