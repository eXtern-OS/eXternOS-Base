{"version":3,"names":[],"mappings":"","sources":["downloader.js"],"sourcesContent":["\"use strict\";\r\nlet Promise = require(\"bluebird\");\r\nlet crypto = require(\"crypto\");\r\nlet request = require(\"request\");\r\nlet async = Promise.coroutine;\r\nlet MemoryStream = require(\"memory-stream\");\r\nlet zlib = require(\"zlib\");\r\nlet tar = require(\"tar\");\r\nlet fs = require(\"fs\");\r\nlet _ = require(\"lodash\");\r\nlet unzip = require(\"unzipper\");\r\nlet CMLog = require(\"./cmLog\");\r\n\r\nfunction Downloader(options) {\r\n    this.options = options || {};\r\n    this.log = new CMLog(this.options);\r\n}\r\n\r\nDownloader.prototype.downloadToStream = function(url, stream, hash) {\r\n    let self = this;\r\n    let shasum = hash ? crypto.createHash(hash) : null;\r\n    return new Promise(function (resolve, reject) {\r\n        let length = 0;\r\n        let done = 0;\r\n        let lastPercent = 0;\r\n        request\r\n            .get(url)\r\n            .on(\"error\", function (err) {\r\n                reject(err);\r\n            })\r\n            .on(\"response\", function(data) {\r\n                length = parseInt(data.headers[\"content-length\"]);\r\n                if (!_.isNumber(length)) {\r\n                    length = 0;\r\n                }\r\n            })\r\n            .on(\"data\", function (chunk) {\r\n                if (shasum) {\r\n                    shasum.update(chunk);\r\n                }\r\n                if (length) {\r\n                    done += chunk.length;\r\n                    let percent = done / length * 100;\r\n                    percent = Math.round(percent / 10) * 10 + 10;\r\n                    if (percent > lastPercent) {\r\n                        self.log.verbose(\"DWNL\", \"\\t\" + lastPercent + \"%\");\r\n                        lastPercent = percent;\r\n                    }\r\n                }\r\n            })\r\n            .pipe(stream);\r\n\r\n        stream.once(\"error\", function (err) {\r\n            reject(err);\r\n        });\r\n\r\n        stream.once(\"finish\", function () {\r\n            resolve(shasum ? shasum.digest(\"hex\") : undefined);\r\n        });\r\n    });\r\n};\r\n\r\nDownloader.prototype.downloadString = async(function* (url) {\r\n    let result = new MemoryStream();\r\n    yield this.downloadToStream(url, result);\r\n    return result.toString();\r\n});\r\n\r\nDownloader.prototype.downloadFile = async(function* (url, options) {\r\n    if (_.isString(options)) {\r\n        options.path = options;\r\n    }\r\n    let result = fs.createWriteStream(options.path);\r\n    let sum = yield this.downloadToStream(url, result, options.hash);\r\n    this.testSum(url, sum, options);\r\n    return sum;\r\n});\r\n\r\nDownloader.prototype.downloadTgz = async(function*(url, options) {\r\n    if (_.isString(options)) {\r\n        options.cwd = options;\r\n    }\r\n    let gunzip = zlib.createGunzip();\r\n    let extractor = tar.extract(options);\r\n    gunzip.pipe(extractor);\r\n    let sum =  yield this.downloadToStream(url, gunzip, options.hash);\r\n    this.testSum(url, sum, options);\r\n    return sum;\r\n});\r\n\r\nDownloader.prototype.downloadZip = async(function*(url, options) {\r\n    if (_.isString(options)) {\r\n        options.path = options;\r\n    }\r\n    let extractor = new unzip.Extract(options);\r\n    let sum =  yield this.downloadToStream(url, extractor, options.hash);\r\n    this.testSum(url, sum, options);\r\n    return sum;\r\n});\r\n\r\nDownloader.prototype.testSum = function(url, sum, options) {\r\n    if (options.hash && sum && options.sum && options.sum !== sum) {\r\n        throw new Error(options.hash.toUpperCase() + \" sum of download '\" + url + \"' mismatch!\");\r\n    }\r\n};\r\n\r\nmodule.exports = Downloader;\r\n"],"file":"downloader.js"}