{"version":3,"names":[],"mappings":"","sources":["buildSystem.js"],"sourcesContent":["\"use strict\";\r\nlet CMake = require(\"./cMake\");\r\nlet Dist = require(\"./dist\");\r\nlet CMLog = require(\"./cmLog\");\r\nlet appCMakeJSConfig = require(\"./appCMakeJSConfig\");\r\nlet path = require(\"path\");\r\nlet _ = require(\"lodash\");\r\nlet Promise = require(\"bluebird\");\r\nlet async = Promise.coroutine;\r\nlet Toolset = require(\"./toolset\");\r\n\r\nfunction BuildSystem(options) {\r\n    this.options = options || {};\r\n    this.options.directory = path.resolve(this.options.directory || process.cwd());\r\n    this.log = new CMLog(this.options);\r\n    let appConfig = appCMakeJSConfig(this.options.directory, this.log);\r\n    if (_.isPlainObject(appConfig)) {\r\n        if (_.keys(appConfig).length) {\r\n            this.log.verbose(\"CFG\", \"Applying CMake.js config from root package.json:\");\r\n            this.log.verbose(\"CFG\", JSON.stringify(appConfig));\r\n            // Applying applications's config, if there is no explicit runtime related options specified\r\n            this.options.runtime = this.options.runtime || appConfig.runtime;\r\n            this.options.runtimeVersion = this.options.runtimeVersion || appConfig.runtimeVersion;\r\n            this.options.arch = this.options.arch || appConfig.arch;\r\n        }\r\n    }\r\n    this.log.verbose(\"CFG\", \"Build system options:\");\r\n    this.log.verbose(\"CFG\", JSON.stringify(this.options));\r\n    this.cmake = new CMake(this.options);\r\n    this.dist = new Dist(this.options);\r\n    this.toolset = new Toolset(this.options);\r\n}\r\n\r\nBuildSystem.prototype._ensureInstalled = async(function* () {\r\n    try {\r\n        yield this.toolset.initialize(true);\r\n        yield this.dist.ensureDownloaded();\r\n    }\r\n    catch (e) {\r\n        this._showError(e);\r\n        throw e;\r\n    }\r\n});\r\n\r\nBuildSystem.prototype._showError = function (e) {\r\n    if (this.log.level === \"verbose\" || this.log.level === \"silly\") {\r\n        this.log.error(\"OMG\", e.stack);\r\n    }\r\n    else {\r\n        this.log.error(\"OMG\", e.message);\r\n    }\r\n};\r\n\r\nBuildSystem.prototype.install = function () {\r\n    return this._ensureInstalled();\r\n};\r\n\r\nBuildSystem.prototype._invokeCMake = async(function* (method) {\r\n    try {\r\n        yield this._ensureInstalled();\r\n        return yield this.cmake[method]();\r\n    }\r\n    catch (e) {\r\n        this._showError(e);\r\n        throw e;\r\n    }\r\n});\r\n\r\nBuildSystem.prototype.getConfigureCommand = function () {\r\n    return this._invokeCMake(\"getConfigureCommand\");\r\n};\r\n\r\nBuildSystem.prototype.configure = function () {\r\n    return this._invokeCMake(\"configure\");\r\n};\r\n\r\nBuildSystem.prototype.getBuildCommand = function () {\r\n    return this._invokeCMake(\"getBuildCommand\");\r\n};\r\n\r\nBuildSystem.prototype.build = function () {\r\n    return this._invokeCMake(\"build\");\r\n};\r\n\r\nBuildSystem.prototype.getCleanCommand = function () {\r\n    return this._invokeCMake(\"getCleanCommand\");\r\n};\r\n\r\nBuildSystem.prototype.clean = function () {\r\n    return this._invokeCMake(\"clean\");\r\n};\r\n\r\nBuildSystem.prototype.reconfigure = function () {\r\n    return this._invokeCMake(\"reconfigure\");\r\n};\r\n\r\nBuildSystem.prototype.rebuild = function () {\r\n    return this._invokeCMake(\"rebuild\");\r\n};\r\n\r\nBuildSystem.prototype.compile = function () {\r\n    return this._invokeCMake(\"compile\");\r\n};\r\n\r\nmodule.exports = BuildSystem;\r\n"],"file":"buildSystem.js"}