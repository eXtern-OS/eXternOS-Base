{"version":3,"names":[],"mappings":"","sources":["processHelpers.js"],"sourcesContent":["\"use strict\";\r\nlet Promise = require(\"bluebird\");\r\nlet splitargs = require(\"splitargs\");\r\nlet _ = require(\"lodash\");\r\nlet spawn = require(\"child_process\").spawn;\r\nlet exec = require(\"child_process\").exec;\r\n\r\nlet processHelpers = {\r\n    run: function (command, options) {\r\n        options = _.defaults(options, {silent: false});\r\n        return new Promise(function (resolve, reject) {\r\n            let args = splitargs(command);\r\n            let name = args[0];\r\n            args.splice(0, 1);\r\n            let child = spawn(name, args, {stdio: options.silent ? \"ignore\" : \"inherit\"});\r\n            let ended = false;\r\n            child.on(\"error\", function (e) {\r\n                if (!ended) {\r\n                    reject(e);\r\n                    ended = true;\r\n                }\r\n            });\r\n            child.on(\"exit\", function (code, signal) {\r\n                if (!ended) {\r\n                    if (code === 0) {\r\n                        resolve();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"Process terminated: \" + code || signal));\r\n                    }\r\n                    ended = true;\r\n                }\r\n            });\r\n        });\r\n    },\r\n    exec: function(command) {\r\n        return new Promise(function (resolve, reject) {\r\n            exec(command, function (err, stdout, stderr) {\r\n                if (err) {\r\n                    reject(new Error(err.message + \"\\n\" + (stdout || stderr)));\r\n                }\r\n                else {\r\n                   resolve(stdout);\r\n                }\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = processHelpers;\r\n"],"file":"processHelpers.js"}