{"version":3,"names":[],"mappings":"","sources":["dist.js"],"sourcesContent":["\"use strict\";\r\nlet environment = require(\"./environment\");\r\nlet path = require(\"path\");\r\nlet urljoin = require(\"url-join\");\r\nlet Promise = require(\"bluebird\");\r\nlet fs = require(\"fs-extra\");\r\nlet _ = require(\"lodash\");\r\nlet CMLog = require(\"./cmLog\");\r\nlet TargetOptions = require(\"./targetOptions\");\r\nlet runtimePaths = require(\"./runtimePaths\");\r\nlet async = Promise.coroutine;\r\nlet Downloader = require(\"./downloader\");\r\n\r\nfunction testSum(sums, sum, fPath) {\r\n    let serverSum = _.first(sums.filter(function (s) {\r\n        return s.getPath === fPath;\r\n    }));\r\n    if (serverSum && serverSum.sum === sum) {\r\n        return;\r\n    }\r\n    throw new Error(\"SHA sum of file '\" + fPath + \"' mismatch!\");\r\n}\r\n\r\nfunction Dist(options) {\r\n    this.options = options || {};\r\n    this.log = new CMLog(this.options);\r\n    this.targetOptions = new TargetOptions(this.options);\r\n    this.downloader = new Downloader(this.options);\r\n}\r\n\r\n// Props\r\nObject.defineProperties(Dist.prototype, {\r\n    internalPath: {\r\n        get: function () {\r\n            return path.join(\r\n                environment.home,\r\n                \".cmake-js\",\r\n                (this.targetOptions.runtime) + \"-\" + this.targetOptions.arch,\r\n                \"v\" + this.targetOptions.runtimeVersion);\r\n        }\r\n    },\r\n    externalPath: {\r\n        get: function () {\r\n            return runtimePaths.get(this.targetOptions).externalPath;\r\n        }\r\n    },\r\n    downloaded: {\r\n        get: function () {\r\n            let headers = false;\r\n            let libs = true;\r\n            let stat = getStat(this.internalPath);\r\n            if (stat.isDirectory()) {\r\n                if (this.headerOnly) {\r\n                    stat = getStat(path.join(this.internalPath, \"include/node/node.h\"));\r\n                    headers = stat.isFile();\r\n                }\r\n                else {\r\n                    stat = getStat(path.join(this.internalPath, \"src/node.h\"));\r\n                    if (stat.isFile()) {\r\n                        stat = getStat(path.join(this.internalPath, \"deps/v8/include/v8.h\"));\r\n                        headers = stat.isFile();\r\n                    }\r\n                }\r\n                if (environment.isWin) {\r\n                    for (let libPath of this.winLibs) {\r\n                        stat = getStat(libPath);\r\n                        libs = libs && stat.isFile();\r\n                    }\r\n                }\r\n            }\r\n            return headers && libs;\r\n\r\n            function getStat(path) {\r\n                try {\r\n                    return fs.statSync(path);\r\n                }\r\n                catch (e) {\r\n                    return {\r\n                        isFile: _.constant(false),\r\n                        isDirectory: _.constant(false)\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    },\r\n    winLibs: {\r\n        get: function () {\r\n            let libs = runtimePaths.get(this.targetOptions).winLibs;\r\n            let result = [];\r\n            for (let lib of libs) {\r\n                result.push(path.join(this.internalPath, lib.dir, lib.name));\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    headerOnly: {\r\n        get: function () {\r\n            return runtimePaths.get(this.targetOptions).headerOnly;\r\n        }\r\n    }\r\n});\r\n\r\n// Methods\r\nDist.prototype.ensureDownloaded = async(function* () {\r\n    if (!this.downloaded) {\r\n        yield this.download();\r\n    }\r\n});\r\n\r\nDist.prototype.download = async(function* () {\r\n    let log = this.log;\r\n    log.info(\"DIST\", \"Downloading distribution files.\");\r\n    yield fs.ensureDir(this.internalPath);\r\n    let sums = yield this._downloadShaSums();\r\n    yield Promise.all([this._downloadLibs(sums), this._downloadTar(sums)]);\r\n});\r\n\r\nDist.prototype._downloadShaSums = async(function* () {\r\n    if (this.targetOptions.runtime === \"node\" || this.targetOptions.runtime === \"iojs\") {\r\n        let sumUrl = urljoin(this.externalPath, \"SHASUMS256.txt\");\r\n        let log = this.log;\r\n        log.http(\"DIST\", \"\\t- \" + sumUrl);\r\n        return (yield this.downloader.downloadString(sumUrl))\r\n            .split(\"\\n\")\r\n            .map(function (line) {\r\n                let parts = line.split(/\\s+/);\r\n                return {\r\n                    getPath: parts[1],\r\n                    sum: parts[0]\r\n                };\r\n            })\r\n            .filter(function (i) {\r\n                return i.getPath && i.sum;\r\n            });\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n});\r\n\r\nDist.prototype._downloadTar = async(function* (sums) {\r\n    let log = this.log;\r\n    let self = this;\r\n    let tarLocalPath = runtimePaths.get(self.targetOptions).tarPath;\r\n    let tarUrl = urljoin(self.externalPath, tarLocalPath);\r\n    log.http(\"DIST\", \"\\t- \" + tarUrl);\r\n\r\n    let sum = yield this.downloader.downloadTgz(tarUrl, {\r\n        hash: sums ? \"sha256\" : null,\r\n        cwd: self.internalPath,\r\n        strip: 1,\r\n        filter: function (entryPath) {\r\n            if (entryPath === self.internalPath) {\r\n                return true;\r\n            }\r\n            let ext = path.extname(entryPath);\r\n            return ext && ext.toLowerCase() === \".h\";\r\n        }\r\n    });\r\n\r\n    if (sums) {\r\n        testSum(sums, sum, tarLocalPath);\r\n    }\r\n});\r\n\r\nDist.prototype._downloadLibs = async(function* (sums) {\r\n    const log = this.log;\r\n    const self = this;\r\n    if (!environment.isWin) {\r\n        return;\r\n    }\r\n\r\n    const paths = runtimePaths.get(self.targetOptions);\r\n    for (const dirs of paths.winLibs) {\r\n        const subDir = dirs.dir;\r\n        const fn = dirs.name;\r\n        const fPath = subDir ? urljoin(subDir, fn) : fn;\r\n        const libUrl = urljoin(self.externalPath, fPath);\r\n        log.http(\"DIST\", \"\\t- \" + libUrl);\r\n\r\n        yield fs.ensureDir(path.join(self.internalPath, subDir));\r\n\r\n        const sum = yield this.downloader.downloadFile(libUrl, {\r\n            path: path.join(self.internalPath, fPath),\r\n            hash: sums ? \"sha256\" : null\r\n        });\r\n\r\n        if (sums) {\r\n            testSum(sums, sum, fPath);\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = Dist;\r\n"],"file":"dist.js"}